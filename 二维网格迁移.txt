给你一个 n 行 m 列的二维网格 grid 和一个整数 k。你需要将 grid 迁移 k 次。
每次「迁移」操作将会引发下述活动：
位于 grid[i][j] 的元素将会移动到 grid[i][j + 1]。
位于 grid[i][m - 1] 的元素将会移动到 grid[i + 1][0]。
位于 grid[n - 1][m - 1] 的元素将会移动到 grid[0][0]。
请你返回 k 次迁移操作后最终得到的 二维网格。
示例 ：
输入：grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1
输出：[[9,1,2],[3,4,5],[6,7,8]]
public List<List<Integer>> shiftGrid(int[][] grid, int k) {
        List<List<Integer>> list = new ArrayList<>();
        int lenx = grid.length;
        int leny = grid[0].length;
        k = k % (lenx * leny);
        int startx = (k == 0 ? 0 : lenx - 1 - (k - 1)/leny);
        int starty = (lenx * leny +leny - k) % leny;
        for(int i = 0; i < lenx; i++){
            List<Integer> l = new ArrayList<>();
            for(int j = 0; j < leny; j++){
                l.add(grid[startx][starty]);
                startx = (startx + (starty + 1)/leny) % lenx;
                starty = (starty + 1) % leny;
            }
            list.add(l);
        }
        return list;
    }
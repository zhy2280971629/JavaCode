日题目描述
有一个数组a[NJ顺序存放0~N-1,要求每隔两个数删掉一个数， 到末尾时循环至开
头继续进行，求最后一个被删掉的数的原始下标位置。以8个数(N=7)为例: {0，
1, 2，3, 4, 5, 6, 7}，0->1->2(删除)->3->4->5(删除)->6->7->0(删除)，如此循
环直到最后一个数被删除。
输入描述:
每组数据为一行一个整数n(小于等于1000)，为数组成员数,如果大于
1000，则对a[999]进行计算。
输出描述:
一行输出最后一个被删掉的数的原始下标位置。
示例1输入输出示例仅供调试，后台判题数据一般不包含示例
输入
8
输出
6
import java.util.*;
public class Main{
    public static int lastDeleteIndex(int n, int[] arr){
        int distance = 0;//用来计算两数间的距离
        int count = 0;//标记删除的数的个数
        int i = 0;//遍历数组的游标
        while(true){
            if(count == n){
                return i - 1;
            }
            if(i == n){
                i = i % n;
            }
            if(arr[i] != -1){
                distance++;
            }
            if(distance == 3){
                distance = 0;
                count++;
                arr[i%n] = -1;
            }
            i++;
        }
    }
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        while(sc.hasNext()){
            int n = sc.nextInt();
            int[] arr = new int[n];
            for(int i = 0; i < n; i++){
            arr[i] = i;
            }
            int ret = lastDeleteIndex(n, arr);
            System.out.println(ret);
        }
    }
}

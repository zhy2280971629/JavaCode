给一非空的单词列表，返回前 k 个出现次数最多的单词。
返回的答案应该按单词出现频率由高到低排序。如果不同的单词有相同出现频率，按字母顺序排序。
示例 1：
输入: ["i", "love", "leetcode", "i", "love", "coding"], k = 2
输出: ["i", "love"]
解析: "i" 和 "love" 为出现次数最多的两个单词，均为2次。
    注意，按字母顺序 "i" 在 "love" 之前。
 
示例 2：

输入: ["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"], k = 4
输出: ["the", "is", "sunny", "day"]
解析: "the", "is", "sunny" 和 "day" 是出现次数最多的四个单词，
    出现次数依次为 4, 3, 2 和 1 次。
class cmpKV implements Comparator<Map.Entry<String, Integer>>{
    public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2){
        if(o2.getValue() > o1.getValue()){
            return 1;
        }

        if(o2.getValue() == o1.getValue() && o1.getKey().compareTo(o2.getKey()) > 0){
            return 1;
        }

        if(o2.getValue() == o1.getValue() && o1.getKey().compareTo(o2.getKey()) == 0){
            return 0;
        }

        return -1;
    }
}
class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        //1.统计每个单词出现的次数
        Map<String, Integer> m = new HashMap<>();
        for(String str : words){
            m.put(str, m.getOrDefault(str, 0) + 1);
        }
        //2.创建优先级队列（堆）
        PriorityQueue<Map.Entry<String, Integer>> p = new PriorityQueue<>(new cmpKV());
        for(Map.Entry<String, Integer> e : m.entrySet()){
            p.offer(e);
        }
        //3.取堆中前k个元素
        List<String> ret = new ArrayList<>(k);
        for(int i = 0; i < k;  i++){
            ret.add(p.poll().getKey());
        }
        return ret;
    }
}
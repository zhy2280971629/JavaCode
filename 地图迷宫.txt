■题目描述
小青蛙有一天不小心落入了一个地下迷宫,小青蛙希望用自己仅剩的体力值P跳出这个地下迷宫。为了让问题简单假设这是一个n*m的格子迷宫，迷宫每个位置为0或者1 ,0代表这个位置有障碍物,小青蛙达到不了这个位置;1代表小青蛙可以达到的位置。小青蛙初始在(0,0)位置地下迷宫的出口在(0,m-1)(保证这两个位置都是1,并且保证-定有起点到终点可达的路径),小
青蛙在迷宫中水平移动一个单位距离需要消耗1点体力值,向上爬一个单位距离需要消耗3个单位的体力值，向下移动不消耗体力值，当小青蛙的体力值等于0的时候还没有到达出口，小青蛙将无法逃离迷宫。现在需要你帮助小青蛙计算出能否用仅剩的体力值跳出迷宫(即达到(0,m-1)位置)。
输入描述:
输入包括n+1行:
第一行为三个整数n,m(3 <= m,n <= 10),P(1 <= P <100）
接下来的n行:
每行m个0或者1,以空格分隔
输出描述:
如果能逃离迷宫，则输出一行体力消耗最小的路径，输出格式见
示;如果不能逃离迷宫，则输出"Can not escape!"。 测试娄
答案唯一
示例1输入输出示例仅供调试，后台判题数据一般不包含示例
输入
4 4 10 1 0 0 1 1 1 0 1 0 1 1 1 0  0 1 1
输出
[0,0]，[1,0]，[1,1], [2,1], [2,2], [2,3], [1,3] ,[0, 3]
import java.util.*;

public class Main{
    static String path = "";
    public static String pathOut(int n, int m, int[][] maze, int p){
        if(n <= 0){
            return "Can not escape!";
        }
        boolean[][] visited = new boolean[n][m];
        findPath(n, m, maze, 0, 0, "", visited, p);
        return path;
    }
    
    public static void findPath(int n, int m, int[][] maze, int nowx, int nowy, String ret, boolean[][] visited, int p){
        if(nowx == 0 && nowy == m-1 && maze[0][m-1] == 1){
            if(p >= 0){
                path = ret + "[0," + (m-1) + "]";
            }
            else{
                path = "Can not escape!";
            }
            return;
        }
        if(nowx < n && nowy < m && nowx >= 0 && nowy >= 0 && maze[nowx][nowy] == 1 && !visited[nowx][nowy]){
            visited[nowx][nowy] = true;
            ret += "[" + nowx + "," + nowy +"],";
            findPath(n, m, maze, nowx + 1, nowy, ret, visited, p);//向下
            findPath(n, m, maze, nowx - 1, nowy, ret, visited, p-3);//向上
            findPath(n, m, maze, nowx, nowy - 1, ret, visited, p-1);//向左
            findPath(n, m, maze, nowx, nowy + 1, ret, visited, p-1);//向右
        }
    }
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        while(sc.hasNext()){
            int n = sc.nextInt();
            int m = sc.nextInt();
            int p = sc.nextInt();
            int[][] maze = new int[n][m];
            for(int i = 0; i < n; i++){
                for(int j = 0; j < m; j++){
                    maze[i][j] = sc.nextInt();
                }
            }
            System.out.println(pathOut(n, m, maze, p));
        }
        sc.close();
    }
}



给定一个二叉树，检查它是否是镜像对称的。
例如，二叉树 [1,2,2,3,4,4,3] 是对称的。

    1
   / \
  2   2
 / \ / \
3  4 4  3
但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:

    1
   / \
  2   2
   \   \
   3    3

（1）递归
public boolean isSymmetric(TreeNode root) {
        if(null == root){
            return true;
        }
        return isSymmetric(root.left, root.right);
    }
    private boolean isSymmetric(TreeNode t1, TreeNode t2){
        if(t1 == null && t2 == null){
            return true;
        }
        if(t1 == null || t2 == null){
            return false;
        }
        if(t1.val != t2.val){
            return false;
        }
        return isSymmetric(t1.left, t2.right) && isSymmetric(t1.right, t2.left);
    }
（2）迭代
public boolean isSymmetric(TreeNode root) {
       if(null == root){
           return true;
       }
       Stack<TreeNode> sl = new Stack<>();
       Stack<TreeNode> sr = new Stack<>();
       TreeNode l = root.left;
       TreeNode r = root.right;
       while(l != null || r != null || sl.size() != 0 || sr.size() != 0){
           while(l != null && r != null){
               sl.push(l);
               l = l.left;
               sr.push(r);
               r = r.right;
           }
           if(l != null || r != null){
               return false;
           }
           l = sl.peek();
           sl.pop();
           r = sr.peek();
           sr.pop();
           if(l.val != r.val){
               return false;
           }
           l = l.right;
           r = r.left;
       }
       return true;
    }
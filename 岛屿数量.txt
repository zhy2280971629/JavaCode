给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。
岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。
此外，你可以假设该网格的四条边均被水包围。

 

示例 1:

输入:
11110
11010
11000
00000
输出: 1
示例 2:
输入:
11000
11000
00100
00011
输出: 3
解释: 每座岛屿只能由水平和/或竖直方向上相邻的陆地连接而成。
class Solution {
    int[][] position = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};
    public void dfs(char[][] grid, int row, int col, int curX, int curY, int[][] book){
        //标记已经被搜索过的点
        book[curX][curY] = 1;
        for(int i = 0; i < 4; i++){
            int newX = curX + position[i][0];
            int newY = curY + position[i][1];
            if(newX < 0 || newX >= row || newY < 0 || newY >= col){
                continue;
            }
            if(grid[newX][newY] == '1' && book[newX][newY] == 0){
                dfs(grid, row, col, newX, newY, book);
            }
        }
    }
    public int numIslands(char[][] grid) {
        if(grid.length == 0){
            return 0;
        }
        int row = grid.length;
        int col = grid[0].length;
        int count = 0;
        int[][] book = new int[row][col];
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if(grid[i][j] == '1' && book[i][j] == 0){
                    count++;
                    dfs(grid, row, col, i, j, book);
                }
            }
        }
        return count;
    }
}
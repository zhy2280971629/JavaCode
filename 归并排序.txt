//归并排序
    public static void mergeData(int[] array, int left, int mid, int right, int[] temp){
        int index = left;
        int begin1 = left, end1 = mid, begin2 = mid, end2 = right;
        while(begin1 < end1 && begin2 < end2){
            if(array[begin1] <= array[begin2]){
                temp[index++] = array[begin1++];
            }
            else{
                temp[index++] = array[begin2++];
            }
        }
        //第一个区间还有数据
        while(begin1 < end1){
            temp[index++] = array[begin1++];
        }
        //第二个区间有数据
        while(begin2 < end2){
            temp[index++] = array[begin2++];
        }
    }

    public static void mergeSort(int[] array, int left, int right, int[] temp){
        if(right - left > 1){
            int mid = left + ((right - left) >> 1);
            //左半部分[left,mid)
            mergeSort(array, left, mid, temp);
            //右半部分
            mergeSort(array, mid, right, temp);
            //归并
            mergeData(array, left, mid, right, temp);
            //归并结束后，有序数列在temp中
            //将temp中的数据拷贝到array中
            System.arraycopy(temp, left, array, left, right-left);
        }
    }

    public static void mergeSort(int[] array){
        int[] temp = new int[array.length];
        mergeSort(array, 0, array.length, temp);
    }

    //归并排序非递归
    public static void mergeSortNor(int[] array){
        int[] temp = new int[array.length];
        int gap = 1;
        while(gap < array.length){
            for(int i = 0; i < array.length; i += gap*2){
                int left = i;
                int mid = left + gap;
                int right = mid + gap;
                if(mid > array.length){
                    mid = array.length;
                }
                if(right > array.length){
                    right = array.length;
                }
                mergeData(array, left, mid, right, temp);
            }
            System.arraycopy(temp, 0, array, 0, array.length);
            gap <<= 1;
        }
    }

public static int partion1(int[]array,int left,int right){
        int begin = left;
        int end = right - 1;
        int key = array[end];
        while(begin < end){
            //begin从前往后找，比基准值大的元素
            while(begin < end && array[begin] <= key){
                begin++;
            }
            //end从后往前找，比基准值小的元素
            while(end >= 0 && array[end] >= key){
                end--;
            }
            if(begin < end){
                swap(array,begin,end);
            }
        }
        if(begin != right - 1){
            swap(array,begin,right-1);
        }
        return begin;
    }
public static int partion2(int[]array,int left,int right){
        int begin = left;
        int end = right - 1;
        int key = array[end];
        while(begin < end){
            //begin从前往后找，比基准值大的元素
            while(begin < end && array[begin] <= key){
                begin++;
            }
            //找到了比基准值大的元素，用begin填坑
            if(begin < end){
                array[end] = array[begin];
                end--;
            }
            //end从后往前找，比基准值小的元素
            while(end >= 0 && array[end] >= key){
                end--;
            }
            //找到了一个比基准值小的元素，用end来填坑
            if(begin < end){
                array[begin] = array[end];
                begin++;
            }
        }
        //用key值来填最后一个坑
        array[begin] = key;
        return begin;
    }
public static void quickSort(int[]array,int left,int right){
        if(right - left > 1){
            //说明区间至少有两个元素
            int div = partion3(array,left,right);
            //快排基准值的左侧
            quickSort(array,left,div);
            quickSort(array,div+1,right);
        }
    }
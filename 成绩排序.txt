■题目描述
查找和排序
题目:输入任意(用户，成绩)序列，可以获得成绩从高到低或从低到高
的排列,相同成绩
都按先录入排列在前的规则处理。
例示:
jack      70
peter    96
Tom     70
smith   67
从高到低 成绩
peter   96
jack     70
Tom    70
smith   67
从低到高
smith   67
Tom    70
jack     70
peter   96
输入描述:
输入多行，先输入要排序的人的个数，然后分别输入他们的名字和成
绩，以一个空格隔开
输出描述:
按照指定方式输出名字和成绩，名字和成绩之间以一个空格隔开
示例1输入输出示例仅供调试，后台判题数
输入
3
fang 90
yang 50
ning 70
输出
fang 90 
ning 70
yang 50
import java.util.*;
class Student{
    String name;
    int score;
    public Student(String name, int score){
        this.name = name;
        this.score = score;
    }
}
public class Main{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        while(sc.hasNext()){
            int num = sc.nextInt();//要排序的人的个数
            int way = sc.nextInt();//排序方式
            List<Student> list = new ArrayList<>();
            for(int i = 0; i < num; i++){
                String name = sc.next();
                int score = sc.nextInt();
                list.add(new Student(name, score));
            }
            //降序
            if(way == 0){
                Collections.sort(list, new Comparator<Student>(){
                    @Override
                    public int compare(Student o1, Student o2) {
                        return o2.score - o1.score;
                    }
                });
            }
            //升序
            else Collections.sort(list, new Comparator<Student>() {
                @Override
                public int compare(Student o1, Student o2) {
                    return o1.score - o2.score;
                }
            });
            for(int i = 0; i < num; i++){
                System.out.println(list.get(i).name + " " + list.get(i).score);
            }
        }
    }
}



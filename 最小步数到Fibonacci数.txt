■题目描述
Fibonacci数列是这样定义的:
F[0]=0
F[1]= 1
for eachiz2: F[们]= F[i-1]+ F[|-2]
因此，Fibonacci数列就形如: 0, 1, 1,2,3,5, 8, 13, ...在Fibonacci数列中的数
我们称为Fibonacci数。给你一个N,你想让其变为-个Fibonacci数，每-步你可
以把当前数字X变为X- 1或者X+1,现在给你一个数N求最少需要多少步可以变为
Fibonacci数。
输入描述:
输入为一个正整数N(1≤N≤1, 000, 000)
输出描述:
输出一个最小的步数变为Fibonacci数"
示例1
输入
15
输出
2
import java.util.*;

public class Main{
    
    public static int countSteps(int n){
        int f1 = 0;
        int f2 = 1;
        int f3 = f1 + f2;
        while(true){
            if(n == f1 || n == f2){
                return 0;
            }else
            if(f2 > n){
                if(Math.abs(f1 - n) > Math.abs(f2 - n)){
                    return Math.abs(f2 - n);
                }
                else{
                    return Math.abs(f1 - n);
                }
            }
            f1 = f2;
            f2 = f3;
            f3 = f1 + f2;
        }
    }
    
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int ret = countSteps(n);
        System.out.println(ret);
    }
}

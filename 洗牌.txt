题目描述
洗牌在生活中十分常见，现在需要写一个程序模拟洗牌的过程。 现在需要洗2n张
牌，从上到下依次是第1张，第2张，第3张-直到第2n张。 首先，我们把这2n张
牌分成两堆，左手拿着第1张到第n张(上半堆)，右手拿着第n+ 1张到第2n张
(下半堆)。接着就开始洗牌的过程，先放下右手的最后-张牌，再放下左手的
最后一张牌，接着放下右手的倒数第二张牌， 再放下左手的倒数第二张牌，直到
最后放下左手的第一张牌。接着把牌合并起来就可以了。例如有6张牌，最开始
牌的序列是1,2,3,4,5,6。首先分成两组，左手拿着1,2,3;右手拿着4,5,6。在洗牌
过程中按顺序放下了6,3,5,2,4,1。把这六张牌再次合成一组牌之后，我们按照从上
往下的顺序看这组牌，就变成了序列1,4,2,5,3,6。现在给出一个原始牌组，请输
出这副牌洗牌k次之后从上往下的序列。
输入描述:
第一行一个数T(T≤100)， 表示数据组数。对于每组数据，第一行两个数
n,k(1≤n,k≤100)，接下来一行有2n个数a1,a2,...,a2n(1≤ai≤
1000000000)。表示原始牌组从上到下的序列。
输出描述:
对于每组数据，输出一行，最终的序列。数字之间用空格隔开，不要在行末
输出多余的空格。
示例1
输入
33112345632123456221111
输出
1425361543261111
import java.util.*;

public class Main {
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        while(sc.hasNext()){
            int m = sc.nextInt();
            while(m!=0){
                int n = sc.nextInt();
                int k = sc.nextInt();
                int [] arr = new int[2 * n];
                //计算下标
                for(int i = 0; i < 2 * n; i++){
                    int tmp = i;
                    for(int j = 0; j < k ;j++){
                        if(tmp < n){
                            tmp = 2 * tmp;
                        }else{
                            tmp = 2 *(tmp-n) + 1;
                        }
                    }
                    //temp为元素经历k次之后的下标
                    arr[tmp] = sc.nextInt();
                }
                //输出格式控制
                for(int i = 0; i < 2*n; i++){
                    if(i == 2 * n-1){
                        System.out.print(arr[i]);
                    }else {
                        System.out.print(arr[i]+" ");
                    }
                }
                System.out.println();
                m--;
            }
        }
    }
}

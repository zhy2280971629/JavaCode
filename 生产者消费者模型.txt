public class BreadOperator {
    //库存面包数量:上限100，下限0
    public static volatile int SUM;
    //默认生产者：面包师傅生产面包：一次生产3个面包
    private static class Producer implements Runnable{
        @Override
        public void run(){
            try {
                for(int i = 0; i < 20; i++){
                    synchronized (BreadOperator.class){
                        while(SUM + 3 > 100){//生产完以后，库存大于100是不行的，所以库存在97以上就不生产
                            //释放对象锁需要让其他线程进入同步代码块,当前线程需要进入阻塞状态
                            BreadOperator.class.wait();
                        }
                        SUM += 3;//生产面包
                        System.out.println(Thread.currentThread().getName() + "，生产了，库存为：" + SUM);
                    }
                    Thread.sleep(1000);
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    private static class Consumer implements Runnable{
        @Override
        public void run(){
            try {
                while(true){
                    synchronized (BreadOperator.class){
                        //库存为0，不能继续消费
                        while(SUM == 0){
                            BreadOperator.class.wait();
                        }
                        SUM--;
                        //notify()/notifyAll()都是通知调用wait被阻塞的线程
                        //notify随机唤醒一个wait方法阻塞的线程
                        //notifyAll唤醒全部wait阻塞的线程
                        //在sychronized代码块结束，也就是对象锁释放之后才会唤醒
                        //即sychronized结束之后，wait和sychronized代码行被阻塞的线程都会被唤醒
                        BreadOperator.class.notify();
                        System.out.println(Thread.currentThread().getName() + "，消费了，库存为：" + SUM);
                    }
                    Thread.sleep(100);
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args) {
        //启动5个生产者线程生产面包
        for(int i = 0; i < 5; i++){
            new Thread(new Producer(),"面包师傅"+ i).start();
        }
        //启动消费者线程消费面包
        for(int i = 0; i < 20; i++){
            new Thread(new Consumer(),"消费者" + i).start();
        }
    }
}

给定一个二维的矩阵，包含 'X' 和 'O'（字母 O）。

找到所有被 'X' 围绕的区域，并将这些区域里所有的 'O' 用 'X' 填充。

示例:

X X X X
X O O X
X X O X
X O X X
运行你的函数后，矩阵变为：

X X X X
X X X X
X X X X
X O X X
解释:

被围绕的区间不会存在于边界上，换句话说，任何边界上的 'O' 都不会被填充为 'X'。 任何不在边界上，或不与边界上的 'O' 相连的 'O' 最终都会被填充为 'X'。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。
class Solution {
    int[][] position = {{1,0}, {-1,0}, {0,1}, {0,-1}};
    //找到所有和边上相连通的点
    public void dfs(char[][] board, int row, int col, int curX, int curY){
        //和边上连通的点做特殊标记
        board[curX][curY] = 'A';
        //上下搜索
        for(int i = 0; i < 4; i++){
            int newX = curX + position[i][0];
            int newY = curY + position[i][1];
            if(newX < 0 || newX >= row || newY < 0 || newY >=
            col){
                continue;
            }
            if(board[newX][newY] == 'O'){
                dfs(board, row, col, newX, newY);
            }
        }
    }
    public void solve(char[][] board) {
        if(board.length == 0){
            return;
        }
        int row = board.length;
        int col = board[0].length;
        //第一列和最后一列
        for(int i = 0; i < row; i++){
            if(board[i][0] == 'O'){
                dfs(board, row, col, i, 0);
            }
            if(board[i][col-1] == 'O'){
                dfs(board, row, col, i, col-1);
            }
        }
        //第一行和最后一行
        for(int j = 0; j < col; j++){
            if(board[0][j] == 'O'){
                dfs(board, row, col, 0, j);
            }
            if(board[row-1][j] == 'O'){
                dfs(board, row, col, row-1, j);
            }
        }
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if(board[i][j] == 'A'){
                    board[i][j] = 'O';
                }
                else{
                    board[i][j] = 'X';
                }
            }
        }
    }
}
1.删除链表中等于给定值 **val** 的所有节点。
public ListNode removeElements(ListNode head, int val) {
        if(head==null){
            return null;
        }
         while(head!=null&&head.val==val){
             head=head.next;
         }
             ListNode pre=head;
             if(pre!=null){
                 while(pre.next!=null){
                     if(pre.next.val==val){
                         pre.next=pre.next.next;
                     }else{
                         pre=pre.next;
                     }
                 }
             }   
        return head;
    }
2. 反转一个单链表。
public ListNode reverseList(ListNode head) {
        ListNode pre=null;
        ListNode newHead=null;
        ListNode cur=head;
        while(cur!=null){
            ListNode curNext=cur.next;
            if(curNext==null){
                newHead=cur;
            }
            cur.next=pre;
            pre=cur;
            cur=curNext;
        }
        return newHead;
}
3. 给定一个带有头结点 head 的非空单链表，返回链表的中间结点。如果有两个中间结点，则返回第二个中间结点。
public ListNode middleNode(ListNode head) {
        if(head==null){
            return null;
        }
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null&&fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
        }
        return slow;
    }
4. 输入一个链表，输出该链表中倒数第k个结点。
public ListNode FindKthToTail(ListNode head,int k) {
        if(k<=0||head==null){
            return null;
        }
        ListNode fast=head;
        ListNode slow=head;
        while(k-1>0){
            if(fast!=null&&fast.next!=null){
                fast=fast.next;
                k--;
            }else{
                return null;
            }
        }
        while(fast.next!=null){
            fast=fast.next;
            slow=slow.next;
        }
       return slow;
    }
5. 将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。
public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
       ListNode node=new ListNode(-1);
       ListNode tmp=node;
       while(l1!=null&&l2!=null){
           if(l1.val<l2.val){
               tmp.next=l1;
               l1=l1.next;
               tmp=tmp.next;
           }else{
               tmp.next=l2;
               l2=l2.next;
               tmp=tmp.next;
           }
       }
       if(l1!=null){
           tmp.next=l1;
       }
       if(l2!=null){
           tmp.next=l2;
       }
       return node.next;
    }
6. 编写代码，以给定值x为基准将链表分割成两部分，所有小于x的结点排在大于或等于x的结点之前。
public ListNode partition(ListNode pHead, int x) {
        ListNode cur=pHead;
        ListNode bs=null;
        ListNode be=null;
        ListNode as=null;
        ListNode ae=null;
        while(cur!=null){
            if(cur.val<x){
                //第一次插入
                if(bs==null){
                    bs=cur;
                    be=cur;
                }else{
                    be.next=cur;
                    be=be.next;
                }
            }else{
                if(as==null){
                    as=cur;
                    ae=cur;
                }else{
                    ae.next=cur;
                    ae=ae.next;
                }
            }
            cur=cur.next;
        }
        if(bs==null){
            return as;
        }
        be.next=as;
        if(as!=null){
            ae.next=null;
        }
        return bs;
    }
7. 在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。
public ListNode deleteDuplication(ListNode pHead)
    {
        if(pHead==null){
            return null;
        }
        ListNode tmp=new ListNode(-1);
        ListNode cur=pHead;
        ListNode node=tmp;
        while(cur!=null){
            if(cur.next!=null&&cur.val==cur.next.val){
                while(cur.next!=null&&cur.val==cur.next.val){
                cur=cur.next;
                }
                cur=cur.next;
            }else{
            tmp.next=cur;
            cur=cur.next;
            tmp=tmp.next;
            }
        }
        tmp.next=null;
        return node.next;
    }
8. 链表的回文结构。
public boolean chkPalindrome(ListNode A) {
        ListNode fast = A;
        ListNode slow = A;
        while (fast != null && fast.next!=null) {
            fast = fast.next.next;
            slow = slow.next;
            }
        //反转
        ListNode p = slow.next;
        while (p != null) {
            ListNode pNext = p.next;
            p.next=slow;
            slow=p;
            p=pNext;
        }
        while(slow != A) {
            if (slow.val != A.val) {
                return false;
            }
            //偶数
            if(A.next==slow){
                return true;
            }
            A = A.next;
            slow = slow.next;
            //slow往前    head 往后  .data不一样 返回false
            //直到相遇
        }
        return true;
    }
9.输入两个链表，找出它们的第一个公共结点。
public static ListNode getIntersectionNode
            (ListNode headA,ListNode headB) {
        if (headA == null || headB == null) {
            return null;
        }
        //永远指向最长的单链表
        ListNode pL = headA;
        int lenA = 0;
        //永远指向最短的单链表
        ListNode pS = headB;
        int lenB = 0;
        while (pL != null) {
            lenA++;
            pL = pL.next;
        }
        while (pS != null) {
            lenB++;
            pS = pS.next;
        }
        pL = headA;
        pS = headB;
        //分别求长度
        //求长度的差值
        int len = lenA - lenB;
        //如果是负数-》pL = headB;  pS = headA
        if (len < 0) {
            pL = headB;
            pS = headA;
            len = lenB - lenA;
        }
        //只需要让pL走len步就好了
        while (len > 0) {
            len--;
            pL = pL.next;
        }

        while (pL != pS && pL != null) {
            pL = pL.next;
            pS = pS.next;
        }
        if (pL == pS && pS != null) {
            return pL;
        }
        //万一没有相交，并且两个单链表长度一样
        //防止最后一个节点

        //走完len步之后  两个同时开始走
        //一直走 走到next值相同时 就是交点
        return null;
    }
10. 给定一个链表，判断链表中是否有环。
public boolean hasCycle(){
        ListNode fast=this.head;
        ListNode slow=this.head;
        while(fast!=null&&fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
            if(slow==fast){
                break;
            }
        }
        if(fast==null||fast.next==null){
            return false;
        }
        return true;
    }
11. 给定一个链表，返回链表开始入环的第一个节点
public ListNode datectCycle(){
        ListNode fast=this.head;
        ListNode slow=this.head;
        while(fast!=null&&fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
            if(fast==slow){
                break;
            }
        }
        if(fast==null||fast.next==null){
            return null;
        }
        slow=this.head;
        while(slow!=fast){
            slow=slow.next;
            fast=fast.next;
        }
        return slow;
    }

    }